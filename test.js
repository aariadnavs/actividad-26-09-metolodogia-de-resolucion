/**
 * Archivo de Pruebas - Procesador de Transacciones
 *
 * Este archivo contiene pruebas manuales para verificar que todas
 * las funcionalidades de la aplicaci√≥n funcionen correctamente.
 *
 * @author Estudiante UPC
 * @version 1.0.0
 */

// Importar m√≥dulos necesarios
const {
  procesarTransacciones,
  generarReporte
} = require('./src/transactionProcessor');
const {
  obtenerTransaccionesEjemplo,
  obtenerTransaccionesProblematicas,
  obtenerTransaccionesVacias,
  generarTransaccionesAleatorias
} = require('./src/data');

/**
 * Funci√≥n para ejecutar una prueba individual
 * @param {string} nombre - Nombre de la prueba
 * @param {Function} funcionPrueba - Funci√≥n que ejecuta la prueba
 */
function ejecutarPrueba(nombre, funcionPrueba) {
  console.log(`\nüß™ PRUEBA: ${nombre}`);
  console.log('='.repeat(50));

  try {
    funcionPrueba();
    console.log('‚úÖ Prueba PAS√ì correctamente');
  } catch (error) {
    console.log('‚ùå Prueba FALL√ì:');
    console.log(`   Error: ${error.message}`);
  }
}

/**
 * Prueba 1: Procesamiento b√°sico con datos v√°lidos
 */
function pruebaProcesamientoBasico() {
  const transacciones = obtenerTransaccionesEjemplo();
  const resumen = procesarTransacciones(transacciones, 1000);

  console.log('üìä Resultados del procesamiento:');
  console.log(`   ‚Ä¢ Balance: $${resumen.balance}`);
  console.log(`   ‚Ä¢ Total transacciones: ${resumen.totalTransacciones}`);
  console.log(`   ‚Ä¢ Promedio ingresos: $${resumen.promedioIngresos}`);
  console.log(`   ‚Ä¢ Promedio gastos: $${resumen.promedioGastos}`);
  console.log(
    `   ‚Ä¢ Transacciones grandes: ${resumen.cantidadTransaccionesGrandes}`
  );

  // Verificar que los c√°lculos sean correctos
  if (resumen.balance !== 3750) {
    throw new Error(`Balance esperado: $3750, obtenido: $${resumen.balance}`);
  }

  if (resumen.totalTransacciones !== 10) {
    throw new Error(
      `Total transacciones esperado: 10, obtenido: ${resumen.totalTransacciones}`
    );
  }
}

/**
 * Prueba 2: Manejo de errores con datos inv√°lidos
 */
function pruebaManejoErrores() {
  const transaccionesProblematicas = obtenerTransaccionesProblematicas();

  try {
    procesarTransacciones(transaccionesProblematicas);
    throw new Error('Deber√≠a haber lanzado un error con datos inv√°lidos');
  } catch (error) {
    console.log('‚úÖ Error capturado correctamente:');
    console.log(`   ${error.message}`);
  }
}

/**
 * Prueba 3: Array vac√≠o
 */
function pruebaArrayVacio() {
  const transaccionesVacias = obtenerTransaccionesVacias();

  try {
    procesarTransacciones(transaccionesVacias);
    throw new Error('Deber√≠a haber lanzado un error con array vac√≠o');
  } catch (error) {
    console.log('‚úÖ Error capturado correctamente:');
    console.log(`   ${error.message}`);
  }
}

/**
 * Prueba 4: Diferentes umbrales
 */
function pruebaDiferentesUmbrales() {
  const transacciones = obtenerTransaccionesEjemplo();

  console.log('üìä Probando diferentes umbrales:');

  // Umbral bajo
  const resumenBajo = procesarTransacciones(transacciones, 100);
  console.log(
    `   ‚Ä¢ Umbral $100: ${resumenBajo.cantidadTransaccionesGrandes} transacciones grandes`
  );

  // Umbral medio
  const resumenMedio = procesarTransacciones(transacciones, 1000);
  console.log(
    `   ‚Ä¢ Umbral $1000: ${resumenMedio.cantidadTransaccionesGrandes} transacciones grandes`
  );

  // Umbral alto
  const resumenAlto = procesarTransacciones(transacciones, 3000);
  console.log(
    `   ‚Ä¢ Umbral $3000: ${resumenAlto.cantidadTransaccionesGrandes} transacciones grandes`
  );

  // Verificar que el n√∫mero de transacciones grandes disminuya con umbrales m√°s altos
  if (
    resumenBajo.cantidadTransaccionesGrandes <=
    resumenMedio.cantidadTransaccionesGrandes
  ) {
    throw new Error(
      'El n√∫mero de transacciones grandes deber√≠a disminuir con umbrales m√°s altos'
    );
  }
}

/**
 * Prueba 5: Generaci√≥n de reporte
 */
function pruebaGeneracionReporte() {
  const transacciones = obtenerTransaccionesEjemplo();
  const resumen = procesarTransacciones(transacciones, 1000);
  const reporte = generarReporte(resumen);

  console.log('üìã Reporte generado:');
  console.log(reporte);

  // Verificar que el reporte contenga informaci√≥n clave
  if (!reporte.includes('RESUMEN DE TRANSACCIONES')) {
    throw new Error('El reporte deber√≠a contener el t√≠tulo');
  }

  if (!reporte.includes(`$${resumen.balance}`)) {
    throw new Error('El reporte deber√≠a contener el balance');
  }
}

/**
 * Prueba 6: Datos aleatorios
 */
function pruebaDatosAleatorios() {
  const transaccionesAleatorias = generarTransaccionesAleatorias(20);
  const resumen = procesarTransacciones(transaccionesAleatorias, 1000);

  console.log('üé≤ Procesando 20 transacciones aleatorias:');
  console.log(`   ‚Ä¢ Balance: $${resumen.balance}`);
  console.log(`   ‚Ä¢ Total transacciones: ${resumen.totalTransacciones}`);
  console.log(
    `   ‚Ä¢ Transacciones grandes: ${resumen.cantidadTransaccionesGrandes}`
  );

  // Verificar que se procesaron todas las transacciones
  if (resumen.totalTransacciones !== 20) {
    throw new Error(
      `Se esperaban 20 transacciones, se procesaron ${resumen.totalTransacciones}`
    );
  }
}

/**
 * Prueba 7: Validaci√≥n de umbral
 */
function pruebaValidacionUmbral() {
  const transacciones = obtenerTransaccionesEjemplo();

  try {
    procesarTransacciones(transacciones, -100);
    throw new Error('Deber√≠a haber lanzado un error con umbral negativo');
  } catch (error) {
    console.log('‚úÖ Error de umbral capturado correctamente:');
    console.log(`   ${error.message}`);
  }
}

/**
 * Funci√≥n principal que ejecuta todas las pruebas
 */
function ejecutarTodasLasPruebas() {
  console.log('üöÄ INICIANDO SUITE DE PRUEBAS');
  console.log('='.repeat(60));

  // Ejecutar todas las pruebas
  ejecutarPrueba('Procesamiento B√°sico', pruebaProcesamientoBasico);
  ejecutarPrueba('Manejo de Errores', pruebaManejoErrores);
  ejecutarPrueba('Array Vac√≠o', pruebaArrayVacio);
  ejecutarPrueba('Diferentes Umbrales', pruebaDiferentesUmbrales);
  ejecutarPrueba('Generaci√≥n de Reporte', pruebaGeneracionReporte);
  ejecutarPrueba('Datos Aleatorios', pruebaDatosAleatorios);
  ejecutarPrueba('Validaci√≥n de Umbral', pruebaValidacionUmbral);

  console.log('\nüéâ TODAS LAS PRUEBAS COMPLETADAS');
  console.log('='.repeat(60));
}

// Verificar argumentos de l√≠nea de comandos
const argumentos = process.argv.slice(2);

if (argumentos.includes('--help') || argumentos.includes('-h')) {
  console.log('\nüìö AYUDA - ARCHIVO DE PRUEBAS');
  console.log('='.repeat(40));
  console.log('Este archivo contiene pruebas para verificar la funcionalidad');
  console.log('de la aplicaci√≥n de procesamiento de transacciones.');
  console.log('\nüöÄ COMANDOS:');
  console.log('‚Ä¢ node test.js - Ejecutar todas las pruebas');
  console.log('‚Ä¢ node test.js --help - Mostrar esta ayuda');
} else {
  // Ejecutar todas las pruebas
  ejecutarTodasLasPruebas();
}

// Exportar funciones para uso en otros archivos
module.exports = {
  ejecutarTodasLasPruebas,
  ejecutarPrueba
};